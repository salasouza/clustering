pacotes <- c("plotly",
"tidyverse",
"ggrepel",
"knitr", "kableExtra",
"sjPlot",
"FactoMineR",
"amap",
"ade4",
"cluster",
"factoextra")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Importando a base de dados
df <- read.csv(file='salary_data.csv', sep=';', header=TRUE)
df%>%head(5)
# Importando a base de dados
df <- read.csv(file='salary_data.csv', sep=',', header=TRUE)
df%>%head(5)
summary(df)
df <- read.csv(file='salary_data.csv', sep=',',
header=TRUE, stringsAsFactors = TRUE)
df%>%head(5)
summary(df)
str(df)
df_cat <- df[,c(1,2,3)]
df_num <- df[,c(4,5,6,7)]
# A função para a criação da ACM pede que sejam utilizados "fatores"
df_cat <- as.data.frame(unclass(df_cat), stringsAsFactors=TRUE)
df_cat
df_cat <- df[,c(1,2)]
df_num <- df[,c(4,5,6,7)]
# A função para a criação da ACM pede que sejam utilizados "fatores"
df_cat <- as.data.frame(unclass(df_cat), stringsAsFactors=TRUE)
df_cat
# Estatísticas descritivas dos dados
summary(df_num)
summary(df_cat)
# Aplicando a padronização por ZScore
df_pad <- as.data.frame(scale(df_num))
round(mean(df_pad$median_salary), 3)
round(mean(df_pad$average_salary), 3)
round(mean(df_pad$lowest_salary), 3)
round(mean(df_pad$highest_salary), 3)
df_pad
# Método de Elbow para identificação do número ótimo de clusters
fviz_nbclust(df_pad, kmeans, method = "wss", k.max = 15)
# Elaboração da clusterização não hieráquica k-means
cluster_kmeans <- kmeans(df_pad,
centers = 4)
# Criando variável categórica para indicação do cluster no banco de dados
df_pad$cluster_K <- factor(cluster_kmeans$cluster)
df$cluster_K <- factor(cluster_kmeans$cluster)
df
# ANOVA da variável 'Age'
summary(anova_ms <- aov(formula = median_salary ~ cluster_K,
data = df_pad))
summary(anova_as <- aov(formula = average_salary ~ cluster_K,
data = df_pad))
summary(anova_ls <- aov(formula = lowest_salary ~ cluster_K,
data = df_pad))
summary(anova_hs <- aov(formula = highest_salary ~ cluster_K,
data = df_pad))
## 'Age'
group_by(df, cluster_K) %>%
summarise(
mean = mean(median_salary, na.rm = TRUE),
sd = sd(Age, na.rm = TRUE),
min = min(Age, na.rm = TRUE),
max = max(Age, na.rm = TRUE),
obs = n())
## 'Age'
group_by(df, cluster_K) %>%
summarise(
mean = mean(median_salary, na.rm = TRUE),
sd = sd(Age, na.rm = TRUE),
min = min(median_salary, na.rm = TRUE),
max = max(median_salary, na.rm = TRUE),
obs = n())
## 'Age'
group_by(df, cluster_K) %>%
summarise(
mean = mean(median_salary, na.rm = TRUE),
sd = sd(median_salary, na.rm = TRUE),
min = min(median_salary, na.rm = TRUE),
max = max(median_salary, na.rm = TRUE),
obs = n())
## 'Averagy Salary'
group_by(df, cluster_K) %>%
summarise(
mean = mean(average_salary, na.rm = TRUE),
sd = sd(average_salary, na.rm = TRUE),
min = min(average_salary, na.rm = TRUE),
max = max(average_salary, na.rm = TRUE),
obs = n())
## 'Lowest Salary'
group_by(df, cluster_K) %>%
summarise(
mean = mean(lowest_salary, na.rm = TRUE),
sd = sd(lowest_salary, na.rm = TRUE),
min = min(lowest_salary, na.rm = TRUE),
max = max(lowest_salary, na.rm = TRUE),
obs = n())
## 'Gender'
group_by(df, cluster_K) %>%
count(country_name) %>%
mutate(prop = prop.table(n))
## 'Ever_Maried'
group_by(df, cluster_K) %>%
count(continent_name) %>%
mutate(prop = prop.table(n))
# Adicionando variável qualitativa que indica o cluster
df_cat$cluster_K <- factor(cluster_kmeans$cluster)
# Estatísticas descritivas
summary(df_cat)
# Importando a base de dados
load("segmenta.Rdata")
segmenta
write.csv(segmenta, file='segmenta.csv')
